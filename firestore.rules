rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Função auxiliar para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }

    // Função auxiliar para verificar se o usuário é dono do documento
    function isOwner(resource) {
      return isAuthenticated() && resource.data.ownerId == request.auth.uid;
    }

    // Função auxiliar para verificar se o usuário tem acesso compartilhado
    function hasSharedAccess(resource) {
      return isAuthenticated() && resource.data.sharedWith.hasAny([request.auth.token.email]);
    }

    // Função para verificar se o usuário está removendo apenas seu próprio acesso
    function isRemovingOwnAccess(resource, request) {
      let oldEmails = resource.data.sharedWith;
      let newEmails = request.resource.data.sharedWith;
      return oldEmails.size() == newEmails.size() + 1 
        && oldEmails.hasAll(newEmails) 
        && oldEmails.hasAny([request.auth.token.email]) 
        && !newEmails.hasAny([request.auth.token.email]);
    }

    // Regras para a coleção users
    match /users/{userId} {
      allow read: if isAuthenticated();  // Permitir leitura para verificar emails
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Regras para a coleção parkingLots
    match /parkingLots/{parkingId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource) || hasSharedAccess(resource));
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && (
        isOwner(resource) || 
        (hasSharedAccess(resource) && isRemovingOwnAccess(resource, request))
      );
      allow delete: if isAuthenticated() && isOwner(resource);
    }

    // Regras para a coleção vehicles
    match /vehicles/{vehicleId} {
      allow read, write: if isAuthenticated();
    }
  }
}